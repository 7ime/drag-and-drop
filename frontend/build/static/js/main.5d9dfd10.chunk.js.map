{"version":3,"sources":["components/context/board-context/board-context.js","components/hoc/with-memo.js","components/card/index.js","components/card/card.js","components/card-list/index.js","components/card-list/card-list.js","components/board-col/index.js","components/board-col/board-col.js","components/board/board.js","components/board/board-methods/handle-drag-start.js","components/board/board-methods/handle-drag.js","components/board/board-methods/handle-drag-enter.js","components/board/board-methods/handle-drag-leave.js","components/board/board-methods/handle-drag-over.js","components/board/board-methods/handle-drop.js","components/board/board-methods/handle-drag-end.js","components/board/board-methods/handle-mouse-down.js","components/board/board-methods/clear-board-col-is-active.js","components/board/board-methods/clear-after-drop-end.js","components/board/board-methods/create-stub.js","components/board/board-methods/remove-stub.js","components/board/board-methods/get-events.js","components/board/board-methods/get-cols.js","components/board/index.js","actions/board-data-update.js","actions/types.js","components/app/index.js","components/app/app.js","utils/random-integer.js","data/random-text.js","data/board-cards.js","data/board-cols.js","utils/date-formatting.js","utils/random-date-in-iso-format.js","reducers/board-data.js","reducers/index.js","store.js","index.js"],"names":["React","createContext","withMemo","Provider","Consumer","Wrapped","memo","Card","props","_props$data","data","title","desc","level","date","colName","dynamicProps","Object","objectWithoutProperties","react_default","a","createElement","assign","className","concat","CardList","getCards","items","events","map","item","id","Fragment","key","components_card","data-card-id","draggable","_this$props","this","cards","_this$props$events","eventsList","list","eventsItem","elCards","Component","BoardCol","newCards","_ref","length","i","data-col","components_card_list","Board","_this","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","countForDragEnterLeave","cardHeight","handleDragStart","e","card","target","col","closest","dt","dataTransfer","offsetHeight","effectAllowed","setData","getAttribute","classList","add","bind","assertThisInitialized","handleDrag","dragCard","contains","parentDragCard","parentNode","insertBefore","createStub","underElem","document","elementFromPoint","clientX","clientY","underCard","parentUnderCard","underCardHeight","clientHeight","top","getBoundingClientRect","nextElementSibling","Math","round","removeStub","underCardId","handleDragEnter","currentTarget","clearBoardColIsActive","handleDragLeave","handleDragOver","preventDefault","handleDrop","boardData","boardDataUpdate","newColID","oldColID","getData","dragCardID","stub","querySelector","underCardID","cardIsLast","copyDragCard","cardsWithoutDragCard","filter","idx","idxUnderCard","findIndex","objectSpread","toConsumableArray","slice","clearAfterDropOrEnd","handleDragEnd","handleMouseDown","window","getSelection","removeAllRanges","cols","querySelectorAll","remove","elem","style","minHeight","setAttribute","removeChild","getEvents","onDragEnter","onDragLeave","onDragOver","onDrop","onDragEnd","onDrag","onDragStart","getCols","components_board_col","onMouseDown","connect","dispatch","ownProps","type","payload","App","removePreloader","body","preloader","getElementById","components_board","randomInteger","min","max","rand","random","text","arrHumidityLevel","getRandomText","from","substr","replace","arrCols","prefix","split","join","toLocaleLowerCase","newItem","countCards","prefixID","Date","String","padStart","getFullYear","getMonth","getDate","getHours","getMinutes","push","initState","state","arguments","undefined","action","rootReducer","combineReducers","store","createStore","ReactDOM","render","es","components_app"],"mappings":"6WAKIA,IAAMC,gBCCKC,KDHXC,WACAC,SCFa,SAACC,GACd,OAAOL,IAAMM,KAAKD,KCDPE,SCuBAL,EAnBF,SAACM,GAAU,IAAAC,EAIID,EAFpBE,KAAQC,EAFQF,EAERE,MAAOC,EAFCH,EAEDG,KAAMC,EAFLJ,EAEKI,MAAOC,EAFZL,EAEYK,KAC5BC,EACoBP,EADpBO,QACGC,EAJaC,OAAAC,EAAA,EAAAD,CAIIT,EAJJ,oBAMpB,OACIW,EAAAC,EAAAC,cAAA,MAAAJ,OAAAK,OAAA,CACIC,UAAU,QACNP,GAEJG,EAAAC,EAAAC,cAAA,OAAKE,UAAS,2BAAAC,OAA6BX,IAAUE,GACrDI,EAAAC,EAAAC,cAAA,OAAKE,UAAU,eAAeZ,GAC9BQ,EAAAC,EAAAC,cAAA,OAAKE,UAAU,qBAAqBX,GACpCO,EAAAC,EAAAC,cAAA,OAAKE,UAAU,cAAf,WAAqCT,OClBlCW,oNCMXC,SAAW,SAACC,EAAOC,EAAQb,GACvB,OAAOY,EAAME,IAAI,SAACC,GAAS,IACfC,EAAOD,EAAPC,GAER,OACIZ,EAAAC,EAAAC,cAACF,EAAAC,EAAMY,SAAP,CAAgBC,IAAKF,GACjBZ,EAAAC,EAAAC,cAACa,EAADjB,OAAAK,OAAA,CACIZ,KAAMoB,EACNK,eAAcJ,EACdK,WAAS,EACTrB,QAASA,GACLa,gFAOf,IAAAS,EAIWC,KAAK9B,MAFjB+B,EAFCF,EAEDE,MAFCC,EAAAH,EAGDT,OAAgBa,EAHfD,EAGSE,KAAwBC,EAHjCH,EAG2BV,KAC5Bf,EAJCsB,EAIDtB,QAEE6B,EAAUN,KAAKZ,SAASa,EAAOI,EAAY5B,GAEjD,OACII,EAAAC,EAAAC,cAAA,OAAKE,UAAU,aACXJ,EAAAC,EAAAC,cAAA,MAAAJ,OAAAK,OAAA,CACIC,UAAU,uCACNkB,GAEHG,EACDzB,EAAAC,EAAAC,cAAA,OAAKE,UAAU,+CAnCZsB,cCJRC,0MCKgC,IAAZC,EAAYC,EAAnBT,MACZA,EAAUD,KAAK9B,MAAf+B,MAER,GAAGA,EAAMU,SAAWF,EAASE,OACzB,OAAO,EAGX,IAAI,IAAIC,EAAI,EAAGA,EAAIX,EAAMU,OAAQC,IAC7B,GAAGX,EAAMW,GAAGnB,KAAOgB,EAASG,GAAGnB,GAG3B,OAAO,EAIf,OAAO,mCAGF,IAAAM,EACgCC,KAAK9B,MAAlCuB,EADHM,EACGN,GAAIpB,EADP0B,EACO1B,MAAO4B,EADdF,EACcE,MAAOX,EADrBS,EACqBT,OAC1B,OACIT,EAAAC,EAAAC,cAAA,OAAKE,UAAU,YAAY4B,WAAUpB,GACjCZ,EAAAC,EAAAC,cAAA,OAAKE,UAAU,qBACXJ,EAAAC,EAAAC,cAAA,OAAKE,UAAU,oBAAoBZ,GACnCQ,EAAAC,EAAAC,cAAA,OAAKE,UAAU,oBAAoBgB,EAAMU,OAAzC,WAEJ9B,EAAAC,EAAAC,cAAC+B,EAAD,CAAUb,MAAOA,EAAOX,OAAQA,EAAQb,QAASJ,YA3B1CkC,wBCiBjBQ,cACF,SAAAA,EAAY7C,GAAO,IAAA8C,EAAA,OAAArC,OAAAsC,EAAA,EAAAtC,CAAAqB,KAAAe,IACfC,EAAArC,OAAAuC,EAAA,EAAAvC,CAAAqB,KAAArB,OAAAwC,EAAA,EAAAxC,CAAAoC,GAAAK,KAAApB,KAAM9B,KAEDmD,uBAAyB,EAC9BL,EAAKM,WAAa,EAElBN,EAAKO,gBC9BN,SAAyBC,GAC5B,IAAMC,EAAOD,EAAEE,OACTC,EAAMF,EAAKG,QAAQ,cACnBC,EAAKL,EAAEM,aAEb9B,KAAKsB,WAAaG,EAAKM,aAEvBF,EAAGG,cAAc,OAEjBH,EAAGI,QAAQ,UAAWR,EAAKS,aAAa,iBACxCL,EAAGI,QAAQ,MAAON,EAAIO,aAAa,aAEnCP,EAAIQ,UAAUC,IAAI,cDkBgCC,KAAhB1D,OAAA2D,EAAA,EAAA3D,QAAA2D,EAAA,EAAA3D,CAAAqC,KAC9BA,EAAKuB,WE/BN,SAAoBf,GACvB,IAAMgB,EAAWhB,EAAEE,OAEnB,IAAIc,EAASL,UAAUM,SAAS,aAAc,CAC1C,IAAMC,EAAiBF,EAASG,WAKhC,OAHAH,EAASL,UAAUC,IAAI,aACvBM,EAAeE,aAAa5C,KAAK6C,WAAW,MAAOL,IAE5C,EAGX,IAAMM,EAAYC,SAASC,iBAAiBxB,EAAEyB,QAASzB,EAAE0B,SACnDC,EAAYL,EAAUlB,QAAQ,SAEpC,GAAGuB,EAAW,CACV,IAAMC,EAAkBD,EAAUR,WAC5BU,EAAkBF,EAAUG,aAC1BC,EAAQJ,EAAUK,wBAAlBD,IAER,GAAGJ,EAAUM,mBAAmBtB,UAAUM,SAAS,sBAC5CiB,KAAKC,MAAMJ,EAAOF,EAAkB,GAAM7B,EAAE0B,QAG3C,OAFAlD,KAAK4D,aACLR,EAAgBR,aAAa5C,KAAK6C,WAAW,QAASM,EAAUM,qBACzD,EAIf,IAAMI,EAAcV,EAAUjB,aAAa,gBAE3ClC,KAAK4D,aAELR,EAAgBR,aAAa5C,KAAK6C,WAAWgB,GAAcV,QAG3D,GAAGL,GAAaA,EAAUX,UAAUM,SAAS,qBAAsB,CAC/D,IAAMW,EAAkBN,EAAUH,WAElC3C,KAAK4D,aAELR,EAAgBR,aAAa5C,KAAK6C,WAAW,QAASC,KFTjBT,KAAX1D,OAAA2D,EAAA,EAAA3D,QAAA2D,EAAA,EAAA3D,CAAAqC,KAC9BA,EAAK8C,gBGhCN,SAAyBtC,GAC5BxB,KAAKqB,yBACL,IAAMM,EAAMH,EAAEuC,cAAcnC,QAAQ,cAMpC,OAJA5B,KAAKgE,wBAELrC,EAAIQ,UAAUC,IAAI,cAEX,GHwB2CC,KAAhB1D,OAAA2D,EAAA,EAAA3D,QAAA2D,EAAA,EAAA3D,CAAAqC,KAC9BA,EAAKiD,gBIjCN,SAAyBzC,GAC5BxB,KAAKqB,yBAE8B,IAAhCrB,KAAKqB,wBACJrB,KAAKgE,yBJ6ByC3B,KAAhB1D,OAAA2D,EAAA,EAAA3D,QAAA2D,EAAA,EAAA3D,CAAAqC,KAC9BA,EAAKkD,eKlCN,SAAwB1C,GAE3B,OADAA,EAAE2C,kBACK,GLgC0C9B,KAAf1D,OAAA2D,EAAA,EAAA3D,QAAA2D,EAAA,EAAA3D,CAAAqC,KAC9BA,EAAKoD,WMnCN,SAAoB5C,GACvBA,EAAE2C,iBADwB,IAAApE,EAGaC,KAAK9B,MAApCmG,EAHkBtE,EAGlBsE,UAAWC,EAHOvE,EAGPuE,gBAEbC,EAAW/C,EAAEuC,cAAcnC,QAAQ,cAAcM,aAAa,YAC9DsC,EAAWhD,EAAEM,aAAa2C,QAAQ,OAElCC,EAAalD,EAAEM,aAAa2C,QAAQ,WAEpCE,EAAO5B,SAAS6B,cAAc,SAE9BC,EAAcF,EAAKzC,aAAa,sBAChC4C,EAAaH,EAAKzC,aAAa,qBAEjC6C,EAAe,KA8GnB,OA1DIT,EAjDDC,IAAaC,EAESH,EAAU9E,IAAI,SAACoC,GAEhC,GAAGA,EAAIlC,KAAO8E,EAAU,CAEpB,IAAMS,EAAuBrD,EAAI1B,MAAMgF,OAAO,SAACxD,EAAMyD,GACjD,OAAGzD,EAAKhC,KAAOiF,IACXK,EAAetD,GACR,KAOf,GAAGoD,EAAa,CAEZ,IAAMM,EAAeH,EAAqBI,UAAU,SAAC5F,GAAD,OAAUA,EAAKC,KAAOoF,IAE1E,OAAOlG,OAAA0G,EAAA,EAAA1G,CAAA,GACAgD,EADP,CAEI1B,MAAK,GAAAf,OAAAP,OAAA2G,EAAA,EAAA3G,CACEqG,EAAqBO,MAAM,EAAGJ,IADhC,CAEDJ,GAFCpG,OAAA2G,EAAA,EAAA3G,CAGEqG,EAAqBO,MAAMJ,OAM1C,OAAGL,EACQnG,OAAA0G,EAAA,EAAA1G,CAAA,GACAgD,EADP,CAEI1B,MAAK,GAAAf,OAAAP,OAAA2G,EAAA,EAAA3G,CACEqG,GADF,CAEDD,MAKLpD,EAIP,OAAOA,IAOqB0C,EAAU9E,IAAI,SAACoC,GAC/C,GAAGA,EAAIlC,KAAO+E,EAAU,CACpB,IAAMQ,EAAuBrD,EAAI1B,MAAMgF,OAAO,SAACxD,GAC3C,OAAGA,EAAKhC,KAAOiF,IACXK,EAAetD,GAER,KAMf,OAAO9C,OAAA0G,EAAA,EAAA1G,CAAA,GACAgD,EADP,CAEI1B,MAAMtB,OAAA2G,EAAA,EAAA3G,CACCqG,KAKf,OAAOrD,IAGsCpC,IAAI,SAACoC,GAClD,GAAGA,EAAIlC,KAAO8E,EAAU,CACpB,GAAGM,EAAa,CACZ,IAAMM,EAAexD,EAAI1B,MAAMmF,UAAU,SAAC3D,GAAD,OAAUA,EAAKhC,KAAOoF,IAE/D,OAAOlG,OAAA0G,EAAA,EAAA1G,CAAA,GACAgD,EADP,CAEI1B,MAAK,GAAAf,OAAAP,OAAA2G,EAAA,EAAA3G,CACEgD,EAAI1B,MAAMsF,MAAM,EAAGJ,IADrB,CAEDJ,GAFCpG,OAAA2G,EAAA,EAAA3G,CAGEgD,EAAI1B,MAAMsF,MAAMJ,OAI3B,OAAOxG,OAAA0G,EAAA,EAAA1G,CAAA,GACAgD,EADP,CAEI1B,MAAK,GAAAf,OAAAP,OAAA2G,EAAA,EAAA3G,CACEgD,EAAI1B,OADN,CAED8E,MAMhB,OAAOpD,KAMf3B,KAAKwF,uBAEE,GN1FsCnD,KAAX1D,OAAA2D,EAAA,EAAA3D,QAAA2D,EAAA,EAAA3D,CAAAqC,KAC9BA,EAAKyE,cOpCN,SAAuBjE,GAC1BxB,KAAKwF,uBPmC2CnD,KAAd1D,OAAA2D,EAAA,EAAA3D,QAAA2D,EAAA,EAAA3D,CAAAqC,KAC9BA,EAAK0E,gBQrCN,SAAyBlE,GAC5BmE,OAAOC,eAAeC,mBRoC4BxD,KAAhB1D,OAAA2D,EAAA,EAAA3D,QAAA2D,EAAA,EAAA3D,CAAAqC,KAE9BA,EAAKgD,sBSvCN,WAGH,IAFA,IAAM8B,EAAO/C,SAAS6B,cAAc,UAAUmB,iBAAiB,cAEvDnF,EAAI,EAAGA,EAAIkF,EAAKnF,OAAQC,IAC5BkF,EAAKlF,GAAGuB,UAAU6D,OAAO,cTmC2B3D,KAAtB1D,OAAA2D,EAAA,EAAA3D,QAAA2D,EAAA,EAAA3D,CAAAqC,KAC9BA,EAAKwE,oBUxCN,WACHxF,KAAKqB,uBAAyB,EAE9BrB,KAAKgE,wBACLhE,KAAK4D,aAEL,IAAMqC,EAAOlD,SAAS6B,cAAc,mBAEjCqB,GACCA,EAAK9D,UAAU6D,OAAO,cV+B4B3D,KAApB1D,OAAA2D,EAAA,EAAA3D,QAAA2D,EAAA,EAAA3D,CAAAqC,KAC9BA,EAAK6B,WWzCN,SAAoBgB,GACvB,IAAMc,EAAO5B,SAAShE,cAAc,OAKpC,OAJA4F,EAAKxC,UAAUC,IAAI,QACnBuC,EAAKuB,MAAMC,UAAYnG,KAAKsB,WAAa,KAGtB,SAAhBuC,GACCc,EAAKyB,aAAa,qBAAqB,GAEhCzB,IAGRd,GACCc,EAAKyB,aAAa,qBAAsBvC,GAGrCc,IXyBsCtC,KAAX1D,OAAA2D,EAAA,EAAA3D,QAAA2D,EAAA,EAAA3D,CAAAqC,KAC9BA,EAAK4C,WY1CN,WACH,IAAMe,EAAO5B,SAAS6B,cAAc,SAEjCD,GACCA,EAAKhC,WAAW0D,YAAY1B,IZsCatC,KAAX1D,OAAA2D,EAAA,EAAA3D,QAAA2D,EAAA,EAAA3D,CAAAqC,KAC9BA,EAAKsF,Ua3CN,WACH,MAAO,CACHlG,KAAM,CACFmG,YAAavG,KAAK8D,gBAClB0C,YAAaxG,KAAKiE,gBAClBwC,WAAYzG,KAAKkE,eACjBwC,OAAQ1G,KAAKoE,WACbuC,UAAW3G,KAAKyF,eAEpBjG,KAAM,CACFoH,OAAQ5G,KAAKuC,WACbsE,YAAa7G,KAAKuB,mBbgCkBc,KAAV1D,OAAA2D,EAAA,EAAA3D,QAAA2D,EAAA,EAAA3D,CAAAqC,KAC9BA,EAAK8F,QcxCN,SAAiBzH,GAAO,IAAA2B,EAAAhB,KAC3B,OAAOX,EAAME,IAAI,SAACC,GACd,OACIX,EAAAC,EAAAC,cAACF,EAAAC,EAAMY,SAAP,CAAgBC,IAAKH,EAAKC,IACtBZ,EAAAC,EAAAC,cAACgI,EAADpI,OAAAK,OAAA,GAAcQ,EAAd,CAAoBF,OAAQ0B,EAAKsF,mBdoCHjE,KAAR1D,OAAA2D,EAAA,EAAA3D,QAAA2D,EAAA,EAAA3D,CAAAqC,KApBfA,wEAwBf,IAAM8E,EAAO9F,KAAK8G,QAAQ9G,KAAK9B,MAAMmG,WAErC,OACIxF,EAAAC,EAAAC,cAAA,OAAKE,UAAU,QAAQ+H,YAAahH,KAAK0F,iBACpCI,UA7BGvF,aerBLQ,Ef8DAkG,YANS,SAAAvG,GAAA,MAAoB,CAAE2D,UAAtB3D,EAAG2D,YAEA,SAAC6C,GAAD,MAAe,CACtC5C,gBAAiB,SAAC6C,GAAD,OAAcD,EgB1DxB,CACHE,KCJyB,oBDKzBC,QhBwDoDF,OAG7CF,CAA6ClG,GkB9D7CuG,8LCIPtH,KAAKuH,4DAIL,IAAMC,EAAOzE,SAAS6B,cAAc,QAC9B6C,EAAY1E,SAAS2E,eAAe,aAC1CF,EAAKnB,YAAYoB,oCAIjB,OACI5I,EAAAC,EAAAC,cAAA,OAAKE,UAAU,WACXJ,EAAAC,EAAAC,cAAA,OAAKE,UAAU,aACXJ,EAAAC,EAAAC,cAAC4I,EAAD,eAfFpH,oBCJH,SAASqH,EAAcC,EAAKC,GACvC,IAAIC,EAAOF,EAAM,GAAMnE,KAAKsE,UAAYF,EAAMD,EAAM,GAEpD,OADAE,EAAOrE,KAAKC,MAAMoE,GCFtB,IAEeE,EAFF,oiBCIPC,EAAmB,CAAC,OAAQ,QAAS,SAAU,QAoBrD,SAASC,EAAcC,EAAMzH,GAGzB,OAFmBsH,EAAKI,OAAOD,EAAMzH,GAEnB2H,QAAQ,SAAU,ICxBxC,IAeeC,EAfK,CAAC,QAAS,cAAe,oBAAqB,SAAU,QAGhDhJ,IAAI,SAACC,GAC7B,IAAMgJ,EAAShJ,EAAKiJ,MAAM,KAAKC,KAAK,KAAKC,oBACnCC,EAAU,GAOhB,OALAA,EAAQnJ,GAAK,OAAS+I,EACtBI,EAAQvK,MAAQmB,EAEhBoJ,EAAQ3I,MDPG,SAAkB4I,EAAYC,GAGzC,IAFA,IEPmCtK,EFO7ByB,EAAQ,GAENW,EAAI,EAAGA,EAAIiI,EAAYjI,IAAK,CAChC,IAAMa,EAAO,CACThC,GAAI,QAAUqJ,EAAW,IAAMlI,EAC/BvC,MAAO8J,EAAcP,EAAc,EAAI,IAAKA,EAAc,EAAG,KAC7DtJ,KAAM6J,EAAcP,EAAc,EAAI,IAAKA,EAAc,GAAI,MAC7DpJ,MEd2BA,EFcN,IAAIuK,KGXpB,MAAQnB,EAAc,EAAG,GAQxB,IANHoB,OAAOpB,EAAc,EAAG,KAAKqB,SAAS,EAAG,KAM3B,IALdD,OAAOpB,EAAc,EAAG,KAAKqB,SAAS,EAAG,KAKhB,IAJzBD,OAAOpB,EAAc,EAAG,KAAKqB,SAAS,EAAG,KAIL,IAHpCD,OAAOpB,EAAc,EAAG,KAAKqB,SAAS,EAAG,KAGM,IAF/CD,OAAOpB,EAAc,EAAG,KAAKqB,SAAS,EAAG,KAEiB,KDVxDzK,EAAK0K,cAMJ,OALH1K,EAAK2K,WAAa,GAKF,MAJhB3K,EAAK4K,UAIwB,OAH7B5K,EAAK6K,WAGsC,IAF3CL,OAAOxK,EAAK8K,cAAcL,SAAS,EAAG,MFUzC1K,MAAO2J,EAAiBN,EAAc,EAAIM,EAAiBvH,OAAO,KAGtEV,EAAMsJ,KAAK9H,GAGf,OAAOxB,ECRSb,CAASwI,EAAc,EAAG,IAAKY,GAExCI,IGbLY,EAAS7K,OAAA2G,EAAA,EAAA3G,CACR4J,GAgBQlE,EAbG,WAA+B,IAA9BoF,EAA8BC,UAAA/I,OAAA,QAAAgJ,IAAAD,UAAA,GAAAA,UAAA,GAAtBF,EAAWI,EAAWF,UAAA/I,OAAA,EAAA+I,UAAA,QAAAC,EAE7C,OAAQC,EAAOxC,MACX,IAAK,oBACD,OAAOzI,OAAA2G,EAAA,EAAA3G,CACAiL,EAAOvC,SAGlB,QACI,OAAOoC,ICRJI,EAJKC,YAAgB,CAChCzF,cCEW0F,EAFDC,YAAYH,GCM1BI,IAASC,OACLrL,EAAAC,EAAAC,cAACoL,EAAA,EAAD,CAAUJ,MAAOA,GACblL,EAAAC,EAAAC,cAACqL,EAAD,OAELrH,SAAS2E,eAAe","file":"static/js/main.5d9dfd10.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst {\r\n    Provider: BoardProvider,\r\n    Consumer: BoardConsumer\r\n} = React.createContext();\r\n\r\nexport {\r\n    BoardProvider,\r\n    BoardConsumer\r\n}","import React from 'react';\r\n\r\nconst withMemo = (Wrapped) => {\r\n    return React.memo(Wrapped)\r\n};\r\n\r\nexport default withMemo;","import Card from './card';\r\n\r\nexport default Card;","import React from 'react';\r\n\r\nimport { withMemo } from '../hoc';\r\n\r\nimport './card.scss';\r\n\r\nconst Card = (props) => {\r\n    const { \r\n        data: { title, desc, level, date }, \r\n        colName, \r\n        ...dynamicProps } = props;\r\n\r\n    return(\r\n        <div \r\n            className=\"card\" \r\n            {...dynamicProps}\r\n        >\r\n            <div className={`card__badge card__badge_${level}`}>{colName}</div>\r\n            <div className=\"card__title\">{title}</div>\r\n            <div className=\"card__description\">{desc}</div>\r\n            <div className=\"card__date\">created {date}</div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default withMemo(Card);","import CardList from './card-list';\r\n\r\nexport default CardList;","import React, { Component } from 'react';\r\n\r\nimport Card from '../card';\r\n\r\nimport './card-list.scss';\r\n\r\nclass CardList extends Component {\r\n\r\n    getCards = (items, events, colName) => {\r\n        return items.map((item) => {\r\n            const { id } = item;\r\n    \r\n            return(\r\n                <React.Fragment key={id}>\r\n                    <Card \r\n                        data={item}\r\n                        data-card-id={id} \r\n                        draggable\r\n                        colName={colName} \r\n                        {...events}\r\n                    />\r\n                </React.Fragment>\r\n            )\r\n        })\r\n    }\r\n\r\n    render() {\r\n        const { \r\n            cards, \r\n            events: { list: eventsList, item: eventsItem }, \r\n            colName } = this.props;\r\n\r\n        const elCards = this.getCards(cards, eventsItem, colName);\r\n\r\n        return(\r\n            <div className=\"card-list\">\r\n                <div \r\n                    className=\"card-list__container-wrap scrollbar\"\r\n                    {...eventsList}\r\n                >\r\n                    {elCards}\r\n                    <div className=\"card-list__fill card-list-fill-js\"></div>\r\n                </div>\r\n            </div>     \r\n        )\r\n    }\r\n}\r\n\r\nexport default CardList;","import BoardCol from './board-col';\r\n\r\nexport default BoardCol;","import React, { Component } from 'react';\r\n\r\nimport CardList from '../card-list';\r\n\r\nimport './board-col.scss';\r\n\r\nclass BoardCol extends Component {\r\n    shouldComponentUpdate({ cards: newCards }) {\r\n        const { cards } = this.props;\r\n\r\n        if(cards.length !== newCards.length) {\r\n            return true;\r\n        }\r\n        \r\n        for(let i = 0; i < cards.length; i++) {\r\n            if(cards[i].id === newCards[i].id) {\r\n                continue\r\n            } else {\r\n                return true;\r\n            }\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    render() {\r\n        const { id, title, cards, events } = this.props;\r\n        return(\r\n            <div className=\"board-col\" data-col={id}>\r\n                <div className=\"board-col__header\">\r\n                    <div className=\"board-col__title\">{title}</div>\r\n                    <div className=\"board-col__count\">{cards.length} units</div>\r\n                </div>\r\n                <CardList cards={cards} events={events} colName={title}/>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default BoardCol;\r\n\r\n","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\n\r\nimport { boardDataUpdate } from '../../actions';\r\n\r\nimport { \r\n    handleDragStart,\r\n    handleDrag,\r\n    handleDragEnter, \r\n    handleDragLeave, \r\n    handleDragOver,\r\n    handleDrop, \r\n    handleDragEnd,\r\n    handleMouseDown,\r\n    clearBoardColIsActive,\r\n    clearAfterDropOrEnd,\r\n    createStub,\r\n    removeStub,\r\n    getEvents,\r\n    getCols } from './board-methods';\r\n\r\nimport './board.scss';\r\n\r\nclass Board extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.countForDragEnterLeave = 0;\r\n        this.cardHeight = 0;\r\n\r\n        this.handleDragStart        = handleDragStart.bind(this);\r\n        this.handleDrag             = handleDrag.bind(this);\r\n        this.handleDragEnter        = handleDragEnter.bind(this);\r\n        this.handleDragLeave        = handleDragLeave.bind(this);\r\n        this.handleDragOver         = handleDragOver.bind(this);\r\n        this.handleDrop             = handleDrop.bind(this);\r\n        this.handleDragEnd          = handleDragEnd.bind(this);\r\n        this.handleMouseDown        = handleMouseDown.bind(this);\r\n\r\n        this.clearBoardColIsActive  = clearBoardColIsActive.bind(this);\r\n        this.clearAfterDropOrEnd    = clearAfterDropOrEnd.bind(this);\r\n        this.createStub             = createStub.bind(this);\r\n        this.removeStub             = removeStub.bind(this);\r\n        this.getEvents              = getEvents.bind(this);\r\n        this.getCols                = getCols.bind(this);                 \r\n    }\r\n\r\n    render() {\r\n        const cols = this.getCols(this.props.boardData);\r\n\r\n        return(\r\n            <div className=\"board\" onMouseDown={this.handleMouseDown}>\r\n                {cols}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = ({ boardData }) => ({ boardData});\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n    boardDataUpdate: (ownProps) => dispatch(boardDataUpdate(ownProps)) \r\n})\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Board);","export function handleDragStart(e) {\r\n    const card = e.target;\r\n    const col = card.closest('.board-col');\r\n    const dt = e.dataTransfer;\r\n\r\n    this.cardHeight = card.offsetHeight;\r\n\r\n    dt.effectAllowed='move';\r\n\r\n    dt.setData('card-id', card.getAttribute('data-card-id'));\r\n    dt.setData('col', col.getAttribute('data-col'));\r\n\r\n    col.classList.add('is_active');\r\n}","export function handleDrag(e) {\r\n    const dragCard = e.target;\r\n\r\n    if(!dragCard.classList.contains('is_hidden')) {\r\n        const parentDragCard = dragCard.parentNode;\r\n\r\n        dragCard.classList.add('is_hidden');\r\n        parentDragCard.insertBefore(this.createStub(null), dragCard);\r\n\r\n        return false;\r\n    }\r\n    \r\n    const underElem = document.elementFromPoint(e.clientX, e.clientY);\r\n    const underCard = underElem.closest('.card');\r\n\r\n    if(underCard) {\r\n        const parentUnderCard = underCard.parentNode;\r\n        const underCardHeight = underCard.clientHeight;\r\n        const { top } = underCard.getBoundingClientRect();\r\n\r\n        if(underCard.nextElementSibling.classList.contains('card-list-fill-js')) {\r\n            if(Math.round(top + (underCardHeight / 2)) < e.clientY) {\r\n                this.removeStub();\r\n                parentUnderCard.insertBefore(this.createStub('last'), underCard.nextElementSibling);\r\n                return false;\r\n            }\r\n        }\r\n\r\n        const underCardId = underCard.getAttribute('data-card-id');\r\n\r\n        this.removeStub();\r\n    \r\n        parentUnderCard.insertBefore(this.createStub(underCardId), underCard);\r\n\r\n    } else {\r\n        if(underElem && underElem.classList.contains('card-list-fill-js')) {\r\n            const parentUnderCard = underElem.parentNode;\r\n\r\n            this.removeStub();\r\n        \r\n            parentUnderCard.insertBefore(this.createStub('last'), underElem);\r\n        }\r\n    }\r\n}","export function handleDragEnter(e) {\r\n    this.countForDragEnterLeave++;\r\n    const col = e.currentTarget.closest('.board-col');\r\n\r\n    this.clearBoardColIsActive();\r\n    \r\n    col.classList.add('is_active');\r\n\r\n    return true;\r\n}","export function handleDragLeave(e)  {\r\n    this.countForDragEnterLeave--;\r\n\r\n    if(this.countForDragEnterLeave === 0) {\r\n        this.clearBoardColIsActive();\r\n    }     \r\n}\r\n","export function handleDragOver(e) {\r\n    e.preventDefault();\r\n    return false;\r\n}\r\n","export function handleDrop(e) {\r\n    e.preventDefault();\r\n\r\n    const { boardData, boardDataUpdate } = this.props;\r\n\r\n    const newColID = e.currentTarget.closest('.board-col').getAttribute('data-col'); // Индификатор колонки в которую перетянули карточку\r\n    const oldColID = e.dataTransfer.getData('col'); // Индификатор колонки из которой перетянули карточку\r\n\r\n    const dragCardID = e.dataTransfer.getData('card-id'); // Индификатор перетягиваемой карточки\r\n\r\n    const stub = document.querySelector('.stub'); // Заглушка\r\n\r\n    const underCardID = stub.getAttribute('data-under-card-id'); // Индификатор карточки, которая находиться под перетягиваемой\r\n    const cardIsLast = stub.getAttribute('data-card-is-last'); // Сигнализирует, что перетягиваемая карточка в конце\r\n\r\n    let copyDragCard = null;\r\n\r\n    // Если ID клонок совпадают, то значит, что карточка находится в той же колонке\r\n    if(newColID === oldColID) {\r\n        // Трансформируем старый массив всех данных доски\r\n        const newBoardData = boardData.map((col) => {\r\n            // Так как мы перебераем все колонки, то ищем ту колонку в которую перетянули карточку\r\n            if(col.id === newColID) {\r\n                // Формируем массив катрточек без перетягиваемой. \r\n                const cardsWithoutDragCard = col.cards.filter((card, idx) => {\r\n                    if(card.id === dragCardID) {\r\n                        copyDragCard = card;\r\n                        return false;\r\n                    } \r\n\r\n                    return true;\r\n                });\r\n\r\n                // Если есть id карточки, над которой расположиться перетаскиваемая карточка\r\n                if(underCardID) {\r\n                    // Нужно получить индекс карточки, над которой расположиться перетаскиваемая карточка\r\n                    const idxUnderCard = cardsWithoutDragCard.findIndex((item) => item.id === underCardID);\r\n\r\n                    return {\r\n                        ...col,\r\n                        cards: [\r\n                            ...cardsWithoutDragCard.slice(0, idxUnderCard),\r\n                            copyDragCard,\r\n                            ...cardsWithoutDragCard.slice(idxUnderCard)\r\n                        ]\r\n                    };\r\n                }\r\n\r\n                // Если перетаскиваемая карточка последняя, то ...\r\n                if(cardIsLast) {\r\n                    return {\r\n                        ...col,\r\n                        cards: [\r\n                            ...cardsWithoutDragCard,\r\n                            copyDragCard,\r\n                        ]\r\n                    };\r\n                }\r\n\r\n                return col;\r\n                \r\n            } else {\r\n                // Возвращаем колонку, которая не изменилась.\r\n                return col;\r\n            }\r\n        })\r\n\r\n        boardDataUpdate(newBoardData);\r\n\r\n    } else {\r\n        const newBoardDataWithoutDragCard = boardData.map((col) => {\r\n            if(col.id === oldColID) {\r\n                const cardsWithoutDragCard = col.cards.filter((card) => {\r\n                    if(card.id === dragCardID) {\r\n                        copyDragCard = card;\r\n\r\n                        return false;\r\n                    }\r\n\r\n                    return true;\r\n                })\r\n\r\n                return {\r\n                    ...col,\r\n                    cards: [\r\n                        ...cardsWithoutDragCard\r\n                    ]\r\n                }\r\n            }\r\n        \r\n            return col;\r\n        });\r\n\r\n        const newBoardData = newBoardDataWithoutDragCard.map((col) => {\r\n            if(col.id === newColID) {\r\n                if(underCardID) {\r\n                    const idxUnderCard = col.cards.findIndex((card) => card.id === underCardID);\r\n\r\n                    return {\r\n                        ...col,\r\n                        cards: [\r\n                            ...col.cards.slice(0, idxUnderCard),\r\n                            copyDragCard,\r\n                            ...col.cards.slice(idxUnderCard),\r\n                        ]\r\n                    }\r\n                } else {\r\n                    return {\r\n                        ...col,\r\n                        cards: [\r\n                            ...col.cards,\r\n                            copyDragCard\r\n                        ]\r\n                    }\r\n                }\r\n            }\r\n\r\n            return col;\r\n        });\r\n\r\n        boardDataUpdate(newBoardData);\r\n    }\r\n\r\n    this.clearAfterDropOrEnd();\r\n\r\n    return false;\r\n}","export function handleDragEnd(e) {\r\n    this.clearAfterDropOrEnd();\r\n}","export function handleMouseDown(e) {\r\n    window.getSelection().removeAllRanges();\r\n}\r\n","export function clearBoardColIsActive() {\r\n    const cols = document.querySelector('.board').querySelectorAll('.board-col');\r\n\r\n    for(let i = 0; i < cols.length; i++) {\r\n        cols[i].classList.remove('is_active');\r\n    }\r\n}","export function clearAfterDropOrEnd() {\r\n    this.countForDragEnterLeave = 0;\r\n    \r\n    this.clearBoardColIsActive();\r\n    this.removeStub();\r\n\r\n    const elem = document.querySelector('.card.is_hidden');\r\n\r\n    if(elem) {\r\n        elem.classList.remove('is_hidden');\r\n    }\r\n}","export function createStub(underCardId) {\r\n    const stub = document.createElement('div');\r\n    stub.classList.add('stub');\r\n    stub.style.minHeight = this.cardHeight + 'px';\r\n    \r\n\r\n    if(underCardId === 'last') {\r\n        stub.setAttribute('data-card-is-last', true)\r\n\r\n        return stub;\r\n    }\r\n\r\n    if(underCardId) {\r\n        stub.setAttribute('data-under-card-id', underCardId)\r\n    }\r\n\r\n    return stub;\r\n}","export function removeStub() {\r\n    const stub = document.querySelector('.stub');\r\n\r\n    if(stub) {\r\n        stub.parentNode.removeChild(stub);\r\n    }\r\n}","export function getEvents() {\r\n    return {\r\n        list: {\r\n            onDragEnter: this.handleDragEnter,\r\n            onDragLeave: this.handleDragLeave,\r\n            onDragOver: this.handleDragOver,\r\n            onDrop: this.handleDrop,\r\n            onDragEnd: this.handleDragEnd\r\n        },\r\n        item: {\r\n            onDrag: this.handleDrag,\r\n            onDragStart: this.handleDragStart\r\n        }\r\n    }\r\n}","import React from 'react';\r\n\r\nimport BoardCol from '../../board-col';\r\n\r\nexport function getCols(items) {\r\n    return items.map((item) => {\r\n        return(\r\n            <React.Fragment key={item.id}>\r\n                <BoardCol {...item} events={this.getEvents()}/>\r\n            </React.Fragment>\r\n        )\r\n    });\r\n}","import Board from './board';\r\n\r\nexport default Board;","import { BOARD_DATA_UPDATE } from './types';\r\n\r\nexport const boardDataUpdate = (payload) => {\r\n    return {\r\n        type: BOARD_DATA_UPDATE,\r\n        payload\r\n    }\r\n}","export const BOARD_DATA_UPDATE = 'BOARD_DATA_UPDATE';","import App from './app';\r\n\r\nexport default App;","import React, { Component } from 'react';\r\n\r\nimport Board from '../board';\r\n\r\nclass App extends Component {\r\n    componentDidMount() {\r\n        this.removePreloader();\r\n    }\r\n\r\n    removePreloader() {\r\n        const body = document.querySelector('body');\r\n        const preloader = document.getElementById('preloader');\r\n        body.removeChild(preloader);\r\n    }\r\n\r\n    render() {\r\n        return(\r\n            <div className=\"wrapper\">\r\n                <div className=\"container\">\r\n                    <Board />\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default App;","export default function randomInteger(min, max) {\r\n    var rand = min - 0.5 + Math.random() * (max - min + 1)\r\n    rand = Math.round(rand);\r\n    return rand;\r\n}","const text = 'Declarative React makes it painless to create interactive UIs. Design simple views for each state in your application, and React will efficiently update and render just the right components when your data changes. Declarative views make your code more predictable and easier to debug. Component-Based Build encapsulated components that manage their own state, then compose them to make complex UIs. Since component logic is written in JavaScript instead of templates, you can easily pass rich data through your app and keep state out of the DOM.';\r\n\r\nexport default text;","import { randomDateInISOFormat, randomInteger, dateFormatting } from '../utils';\r\n\r\nimport text from './random-text';\r\n\r\nconst arrHumidityLevel = ['base', 'light', 'middle', 'high'];\r\n\r\nexport default function getCards(countCards, prefixID) {\r\n    const cards = [];\r\n\r\n    for(let i = 0; i < countCards; i++) {\r\n        const card = {\r\n            id: 'card_' + prefixID + '_' + i,\r\n            title: getRandomText(randomInteger(0 , 50), randomInteger(8, 15)),\r\n            desc: getRandomText(randomInteger(0 , 50), randomInteger(30, 150)),\r\n            date: dateFormatting(new Date(randomDateInISOFormat())),\r\n            level: arrHumidityLevel[randomInteger(0 , arrHumidityLevel.length-1)]\r\n        }\r\n\r\n        cards.push(card);\r\n    }\r\n\r\n    return cards;\r\n}\r\n\r\nfunction getRandomText(from, length) {\r\n    const randomText = text.substr(from, length);\r\n\r\n    return randomText.replace(/^\\s\\s*/, '');\r\n}","import { randomInteger } from '../utils';\r\nimport getCards from './board-cards';\r\n\r\nconst arrNameCols = ['To do', 'In progress', 'Ready for testing', 'Tested', 'Done'];\r\n\r\n\r\nconst arrCols = arrNameCols.map((item) => {\r\n    const prefix = item.split(' ').join('_').toLocaleLowerCase();\r\n    const newItem = {};\r\n\r\n    newItem.id = 'col_' + prefix;\r\n    newItem.title = item;\r\n\r\n    newItem.cards = getCards(randomInteger(2, 15), prefix);\r\n\r\n    return newItem;\r\n});\r\n\r\nexport default arrCols;","export default function dateFormatting(date) {\r\n    const YYYY = date.getFullYear()\r\n    const MM = date.getMonth() + 1\r\n    const DD = date.getDate()\r\n    const HH = date.getHours()\r\n    const mm = String(date.getMinutes()).padStart(2, '0');\r\n\r\n    return YYYY + ' / ' + MM + ' / ' + DD + ' at ' + HH + ':' + mm;\r\n}","import randomInteger from './random-integer';\r\n\r\nexport default function randomDateInISOFormat() {\r\n    const YYYY = '201' + randomInteger(1, 9);\r\n\r\n    const MM = String(randomInteger(1, 11)).padStart(2, '0');\r\n    const DD = String(randomInteger(1, 29)).padStart(2, '0');\r\n    const HH = String(randomInteger(0, 23)).padStart(2, '0');\r\n    const mm = String(randomInteger(0, 59)).padStart(2, '0');\r\n    const ss = String(randomInteger(0, 59)).padStart(2, '0');\r\n\r\n    return YYYY + '-' + MM + '-' + DD + 'T' + HH + ':' + mm + ':' + ss + 'Z';\r\n}","import { arrCols } from '../data';\r\n\r\nconst initState = [\r\n    ...arrCols\r\n]\r\n\r\nconst boardData = (state = initState, action) => {\r\n\r\n    switch (action.type) {\r\n        case 'BOARD_DATA_UPDATE': {\r\n            return [\r\n                ...action.payload\r\n            ]\r\n        }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport default boardData;","import { combineReducers } from 'redux';\r\nimport boardData from './board-data';\r\n\r\nconst rootReducer = combineReducers({\r\n    boardData\r\n})\r\n\r\nexport default rootReducer;\r\n\r\n","import { createStore } from 'redux';\r\n\r\nimport rootReducer from './reducers';\r\n\r\nconst store = createStore(rootReducer);\r\n\r\nexport default store;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { Provider } from 'react-redux';\r\n\r\nimport './styles/_all.scss';\r\n\r\nimport App from './components/app';\r\n\r\nimport store from './store';\r\n\r\nReactDOM.render((\r\n    <Provider store={store}>\r\n        <App />\r\n    </Provider>\r\n), document.getElementById('root'));"],"sourceRoot":""}